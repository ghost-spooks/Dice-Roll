# start with importing the random module for the dice rolls
import random

# these values correspond to multiple functions and must be defined outside of them first
save_inputs = ["1", "2", "3", "cancel"]
file_1 = ["This file is empty."]
file_2 = ["This file is empty."]
file_3 = ["This file is empty."]


# define as many random roll functions as there are dice types that need to be used
def random_roll_d20():
  value = random.randrange(1, 21)
  print(value)


# this function uses a d6 but is designed for a specific roll type, rolling for stats
def stat_roll_d6():
  # a stat roll in dnd works by rolling four six sided dice, removing the smallest roll, and adding the rest
  dice_group = []
  for i in range(4):
    i = random.randrange(1, 7)
    dice_group.append(i)
  dice_group.remove(min(dice_group))
  return (sum(dice_group))


# im defining a function for rolling advantage/disadvantage. if theres somehow an error here, it just brings you to the start of the code
def adv_dis_roll(roll_type):
  x = random.randrange(1, 21)
  y = random.randrange(1, 21)
  if roll_type == "adv":
    check_roll = max(x, y)
    return (check_roll)
  elif roll_type == "dis":
    check_roll = min(x, y)
    return (check_roll)
  else:
    print("--- \nSorry, there was an error with the given input. Returning you to the main menu.")


# gonna start with rolling for skill checks, so ill have the user input the skill check
def skill_check():
  print("--- \nWhat is the skill check you need to pass? Please type an integer between 1 and 20.")
  while True:
    checkvalue = input()
    try:
      checkvalue = int(checkvalue)
    # if the user types a value that is either not an integer or not between 1 and 20, it will produce a corresponding error message and ask for a new input
    except ValueError:
      print("--- \nError! This value is not an integer. Please input an integer that is between 1 and 20.")
      continue
    if 1 <= checkvalue <= 20:
      break
    else:
      print("--- \nError! This value is not between 1 and 20. Please type an integer between 1 and 20.")
  # the next input is roll modifiers. first, we need to decide if theres an advantage or disadvantage roll
  rolltype_list = ["adv", "dis", "neither"]
  print(
      "--- \nIn order to pass the skill check, you must roll a minimum of " +
      str(checkvalue) +
      ". Do you roll for advantage, disadvantage, or neither? Type adv, dis, or neither respectivly.",
  )
  while True:
    roll_type = input()
    # like before, it checks to be sure the the input is valid before using it. if it isn't, it asks for a new input
    if roll_type not in rolltype_list:
      print("--- \nError! This input does not correspond with the options. Please type adv, dis, or neither.")
      continue
    break
  # to wrap up the roll preconditions, we'll ask for the constant modifier they have for this roll, such as a proficiency bonus or an inhibition
  print("--- \nAre there roll modifiers you need to add to the roll, such as a proficiency bonus or a hinderance penalty? If so, please give the value, using negatives for penalties. If the roll is plain, please type 0.")
  # it checks to be sure if the input the user gives is an integer and asks for a new input if it is not
  while True:
    modifier = input()
    try:
      modifier = int(modifier)
    except ValueError:
      print("--- \nError! This value is not an integer. Please input a valid integer.")
      continue
    break
  # it now performs the roll, add the modifier, then compares it with the skill check
  if roll_type == "neither":
    check_roll = random.randrange(1, 21)
    check_roll = check_roll + modifier
    if check_roll >= checkvalue:
      print("--- \nYour roll was " + str(check_roll) + ". You passed the skill check!")
    if check_roll < checkvalue:
      print("--- \nYour roll was " + str(check_roll) + ". You failed the skill check...")
  if roll_type == "adv" or roll_type == "dis":
    check_roll = adv_dis_roll(roll_type)
    check_roll = check_roll + modifier
    if check_roll >= checkvalue:
      print("--- \nYour roll was " + str(check_roll) + ". You passed the skill check!")
    if check_roll < checkvalue:
      print("--- \nYour roll was " + str(check_roll) + ". You failed the skill check...")


# the next function is rolling for character stats, which requires d6 rolls instead
def rolling_stats():

  # Add this line to access the global variables
  global file_1, file_2, file_3

  # here, it defines the list for the stat rolls, the core stats once paired with these rolls as well as their modifiers
  stat_list = []
  stat_pairs = []
  # these are the six core stats which will be assigned stat rolls
  core_stats = ["Strength", "Dexterity", "Constitution", "Intelligence", "Wisdom", "Charisma"]
  for i in range(6):
    stat_list.append(stat_roll_d6())
  print("--- \nWhen rolling for stats in DND, you roll four six-sided dice, remove the lowest number rolled, and add the remaining three. This occurs six times until you have six values, which you will then assign to your character's six core stats. These stats are strength, dexterity, constitution, intelligence, wisdom, and charisma.")
  for i in (core_stats):
    #it rolls for the core stats, puts them in stat_list, then prints it with its positional number, creating a numbered list to pick from
    print("Your stats are:")
    x = 0
    for stat in stat_list:
      x = x + 1
      print(str(x) + ". " + str(stat))
    # it performs the function of producing a numbered list for every core stat in core_stats
    print("--- \nPick which stat you would like to assign to " + str(i) + ". Select numbers 1 to " + str(len(stat_list)) + " for the corresponding stat.")
    while True:
      stat_choice = input()
      if stat_choice.isdigit():
        stat_choice = int(stat_choice)
        if 1 <= stat_choice <= len(stat_list):
          break
        else:
          print("Error! This input is invalid. Please select a number from 1 to" + str(len(stat_list)) + ".")
          continue
      else:
        print("Error! This input is invalid. Please select a number from 1 to " + str(len(stat_list)) + ".")
        continue
    print("--- \n" + str(i) + " has been given " + str(stat_list[int(stat_choice) - 1]) + ".")
    # here, the core stat and its corresponding roll is added to stat_pairs, the proficiency modifier is added to prof_mod, and the selected stat is removed from the list of options
    # in dnd, proficiency modifiers are given by taking the total stat, subtracting 10, and dividing by 2, rounding down to the nearest integer, hence //
    stat_pairs.append(str(i) + " = " + str(stat_list[int(stat_choice) - 1]) + "\nModifier of " + str((stat_list[int(stat_choice) - 1] - 10) // 2))
    stat_list.remove(stat_list[int(stat_choice) - 1])
  print("--- \nYour characters total stats are now:")
  # now it prints each pair of stats and their proficiency modifier
  for pair in range(len(stat_pairs)):
    print(str(stat_pairs[pair]))
  print("\nIf you would like to choose stats again, please return to the main menu and select the stat roll option. Would you like to save this list? Type yes or no.")
  # now, for one final feature, the user can save up to three different stat lists to bring up later if they wish
  while True:
    save_choice = input()
    if save_choice == "yes":
      break
    if save_choice == "no":
      break
    else:
      print("Error! This input is not a valid answer. Please type yes or no.")
      continue
  # now if the user answers yes, they'll be presented a list of files to save their stats
  if save_choice == "yes":
    print("--- \nStats Files \nFile 1 \nFile 2 \nFile 3 \n\nPlease input the corresponding number (1, 2, or 3) of the file that you would like to save this list to, or input 'cancel' to abort the save. Keep in mind that if you choose a file with a preexisting list, it will be overwritten.")
    # this while loop has another while loop inside it, the one outside being used so that it won't break if the user aborts the cancel option
    while True:
      while True:
        chosen_file = str(input())
        if chosen_file not in save_inputs:
          print("--- \nError! This input is not a valid answer. Please input 1, 2, or 3 to pick a file to save to, or input cancel to abort the save.")
          continue
        else:
          break
      # once they select an option, it saves the data to a corresponding file and closes the function
      if chosen_file == "1":
        file_1 = stat_pairs
        print("--- \nYour stats have been saved to file 1. To retrieve them, please select the 'View Saved Stats' option in the main menu.")
        break
      if chosen_file == "2":
        file_2 = stat_pairs
        print("--- \nYour stats have been saved to file 2. To retrieve them, please select the 'View Saved Stats' option in the main menu.")
        break
      if chosen_file == "3":
        file_3 = stat_pairs
        print("--- \nYour stats have been saved to file 3. To retrieve them, please select the 'View Saved Stats' option in the main menu.")
        break
      if chosen_file == "cancel":
        print("Are you sure? Type yes or no.")
      while True:
        abort_perm = str(input())
        if abort_perm != "yes" "no":
          print("--- \nError! This input is not a valid answer. Please type yes or no.")
          continue
        else:
          break
      if abort_perm == "yes":
        print("--- \nUnderstood, returning you to main menu...")
        break
      if abort_perm == "no":
        continue


def stat_viewing():
  print("--- \n-Stat Files- \nFile 1 \nFile 2 \nFile 3 \n\nPlease type the corresponding number (1, 2, or 3) of the file you would like to view, or type 'cancel' to return to the main menu.")
  while True:
    chosen_option = str(input())
    if chosen_option not in save_inputs:
      print("--- \nError! This input is not a valid answer. Please input 1, 2, or 3 to choose a file, or cancel to return to the main menu.")
      continue
    else:
      break
  if chosen_option == "1":
    print(*file_1, sep="\n")
  if chosen_option == "2":
    print(*file_2, sep="\n")
  if chosen_option == "3":
    print(*file_3, sep="\n")
  if chosen_option == "cancel":
    print("--- \nUnderstood, returning to main menu...")


# Function to display the menu options
def display_menu():
  print("---\nMenu:")
  print("1. Skill Check")
  print("2. Rolling Stats")
  print("3. View Saved Stats")
  print("4. Exit")
  print("Enter the number corresponding to your choice:")


# Main program loop
while True:
  display_menu()
  choice = input()
  if choice == "1":
    skill_check()
  elif choice == "2":
    rolling_stats()
  elif choice == "3":
    stat_viewing()
  elif choice == "4":
    print("--- \nExiting program. Goodbye!")
    break
  else:
    print("--- \nInvalid choice. Please enter a number between 1 and 4.")
